{
  "address": "0xCA221be3638001147588c7073839522ed77E1920",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "day",
          "type": "uint256"
        }
      ],
      "name": "DailyWordUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "won",
          "type": "bool"
        }
      ],
      "name": "GameCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "GameInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "GameReset",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "guessNumber",
          "type": "uint8"
        }
      ],
      "name": "GuessSubmitted",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newWord",
          "type": "string"
        }
      ],
      "name": "addWord",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasNewDailyWord",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initializeDailyGame",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resetGame",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "guess",
          "type": "string"
        }
      ],
      "name": "submitGuess",
      "outputs": [
        {
          "internalType": "uint8[5]",
          "name": "",
          "type": "uint8[5]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateDailySeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa8cd9240ff53c7d9deac62a5e4fdc50cf001cb1849118f811049f31670d490f1",
  "receipt": {
    "to": null,
    "from": "0x83380044673fe13afa2A6eCf6F420928DAfa0860",
    "contractAddress": "0xCA221be3638001147588c7073839522ed77E1920",
    "transactionIndex": 0,
    "gasUsed": "7115559",
    "logsBloom": "0x
    "blockHash": "0x5bc8646aaa239d44d97ff4c71d85ff6cc7e4b4ca2bfba0c910483bcee98b6900",
    "transactionHash": "0xa8cd9240ff53c7d9deac62a5e4fdc50cf001cb1849118f811049f31670d490f1",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 27891856,
        "transactionHash": "0xa8cd9240ff53c7d9deac62a5e4fdc50cf001cb1849118f811049f31670d490f1",
        "address": "0xCA221be3638001147588c7073839522ed77E1920",
        "topics": [
          "0x0e70c84908991bee7f9bb917a18e4fe2ed297ad218e2b8b3241c2ce32b0d970f",
          "0x0000000000000000000000000000000000000000000000000000000000004f9c"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x5bc8646aaa239d44d97ff4c71d85ff6cc7e4b4ca2bfba0c910483bcee98b6900"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 27891856,
        "transactionHash": "0xa8cd9240ff53c7d9deac62a5e4fdc50cf001cb1849118f811049f31670d490f1",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000083380044673fe13afa2a6ecf6f420928dafa0860",
          "0x0000000000000000000000007ee41d8a25641000661b1ef5e6ae8a00400466b0"
        ],
        "data": "0x000000000000000000000000000000000000000000000000047194582fccce00000000000000000000000000000000000000000000000000109cbe0c104046040000000000000000000000000000000000000000000005f9718fe375729d56290000000000000000000000000000000000000000000000000c2b29b3e07378040000000000000000000000000000000000000000000005f9760177cda26a2429",
        "logIndex": 1,
        "blockHash": "0x5bc8646aaa239d44d97ff4c71d85ff6cc7e4b4ca2bfba0c910483bcee98b6900"
      }
    ],
    "blockNumber": 27891856,
    "cumulativeGasUsed": "7115559",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "89d12066aa63eb5f8fd88f7447c824f1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"}],\"name\":\"DailyWordUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"won\",\"type\":\"bool\"}],\"name\":\"GameCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"GameInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"GameReset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"guessNumber\",\"type\":\"uint8\"}],\"name\":\"GuessSubmitted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newWord\",\"type\":\"string\"}],\"name\":\"addWord\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasNewDailyWord\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializeDailyGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"guess\",\"type\":\"string\"}],\"name\":\"submitGuess\",\"outputs\":[{\"internalType\":\"uint8[5]\",\"name\":\"\",\"type\":\"uint8[5]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateDailySeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"submitGuess(string)\":{\"params\":{\"guess\":\"5-letter uppercase ASCII word\"},\"returns\":{\"_0\":\"results array: 0 = not in word, 1 = in word wrong position, 2 = correct position\"}}},\"title\":\"On-chain Wordle Game (plaintext)\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addWord(string)\":{\"notice\":\"Owner can add new unique-letter word to the list\"},\"hasNewDailyWord()\":{\"notice\":\"Returns true if a new daily word is available for caller\"},\"initializeDailyGame()\":{\"notice\":\"Initialize today's game for caller\"},\"resetGame()\":{\"notice\":\"Reset the caller's game state\"},\"submitGuess(string)\":{\"notice\":\"Submit a plaintext guess and get per-position results\"},\"updateDailySeed()\":{\"notice\":\"Update the daily seed and target word (idempotent if same day)\"}},\"notice\":\"Purely on-chain Wordle without FHE; uses daily pseudo-random word from a curated list\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Wordle.sol\":\"Wordle\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"contracts/Wordle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.27;\\r\\n\\r\\n/// @title On-chain Wordle Game (plaintext)\\r\\n/// @notice Purely on-chain Wordle without FHE; uses daily pseudo-random word from a curated list\\r\\ncontract Wordle {\\r\\n  uint8 internal constant WORD_LENGTH = 5;\\r\\n  uint8 internal constant MAX_GUESSES = 6;\\r\\n\\r\\n  struct Game {\\r\\n    bool initialized;\\r\\n    uint8 guessCount;\\r\\n    bool completed;\\r\\n    bool won;\\r\\n    uint256 gameDay;\\r\\n  }\\r\\n\\r\\n  mapping(address => Game) private games;\\r\\n\\r\\n  // Store the target word of the current day (as bytes5)\\r\\n  bytes5 private targetWord;\\r\\n\\r\\n  // Owner\\r\\n  address private owner;\\r\\n\\r\\n  // Daily seed bookkeeping\\r\\n  uint256 private dailySeed;\\r\\n  uint256 private lastSeedDay;\\r\\n\\r\\n  // Events\\r\\n  event GameInitialized(address player);\\r\\n  event GuessSubmitted(address player, uint8 guessNumber);\\r\\n  event GameCompleted(address player, bool won);\\r\\n  event DailyWordUpdated(uint256 indexed day);\\r\\n  event GameReset(address player);\\r\\n\\r\\n  constructor() {\\r\\n    owner = msg.sender;\\r\\n    updateDailySeed();\\r\\n    // Initialize target word immediately based on seed\\r\\n    _setTodayWord();\\r\\n  }\\r\\n\\r\\n  // ========================\\r\\n  // Word list and selection\\r\\n  // ========================\\r\\n\\r\\n  string[] private wordList = [\\r\\n    // A\\r\\n    \\\"AWOKE\\\",\\\"ALIEN\\\",\\\"ALIGN\\\",\\\"AGLOW\\\",\\\"ADORE\\\",\\\"ABHOR\\\",\\\"ACTOR\\\",\\\"ACUTE\\\",\\\"ADEPT\\\",\\\"ALBUM\\\",\\r\\n    // B\\r\\n    \\\"BLANK\\\",\\\"BRISK\\\",\\\"BOUND\\\",\\\"BANJO\\\",\\\"BLUSH\\\",\\\"BRUTE\\\",\\\"BICEP\\\",\\\"BELOW\\\",\\\"BLOAT\\\",\\\"BRAIN\\\",\\r\\n    // C\\r\\n    \\\"CRANE\\\",\\\"CHALK\\\",\\\"COVET\\\",\\\"CUMIN\\\",\\\"COBRA\\\",\\\"CANDY\\\",\\\"CLONE\\\",\\\"COUNT\\\",\\\"CURLY\\\",\\\"CEDAR\\\",\\r\\n    // D\\r\\n    \\\"DRAFT\\\",\\\"DRONE\\\",\\\"DRINK\\\",\\\"DOUBT\\\",\\\"DROWN\\\",\\\"DUVET\\\",\\\"DROPS\\\",\\\"DINGO\\\",\\\"DIMLY\\\",\\\"DECAL\\\",\\r\\n    // E\\r\\n    \\\"EPOCH\\\",\\\"ELBOW\\\",\\\"ENACT\\\",\\\"EQUIP\\\",\\\"EXULT\\\",\\\"EMPTY\\\",\\\"ETHIC\\\",\\\"EXTRA\\\",\\\"ENJOY\\\",\\\"EQUAL\\\",\\r\\n    // F\\r\\n    \\\"FROST\\\",\\\"FLING\\\",\\\"FLUTE\\\",\\\"FJORD\\\",\\\"FRAUD\\\",\\\"FABLE\\\",\\\"FEINT\\\",\\\"FOCUS\\\",\\\"FRAME\\\",\\\"FLAKY\\\",\\r\\n    // G\\r\\n    \\\"GLINT\\\",\\\"GROUP\\\",\\\"GRACE\\\",\\\"GUMBO\\\",\\\"GUIDE\\\",\\\"GRAIN\\\",\\\"GLADE\\\",\\\"GRIND\\\",\\\"GRAPH\\\",\\\"GROWN\\\",\\r\\n    // H\\r\\n    \\\"HEART\\\",\\\"HANDY\\\",\\\"HASTE\\\",\\\"HAVEN\\\",\\\"HORSE\\\",\\\"HOUND\\\",\\\"HUMID\\\",\\\"HINGE\\\",\\\"HOTEL\\\",\\\"HYPER\\\",\\r\\n    // I\\r\\n    \\\"INDEX\\\",\\\"IVORY\\\",\\\"IDEAL\\\",\\\"INPUT\\\",\\\"INLET\\\",\\\"IRATE\\\",\\\"IMAGE\\\",\\\"IMBUE\\\",\\\"INFER\\\",\\\"INBOX\\\",\\r\\n    // J\\r\\n    \\\"JUMBO\\\",\\\"JOUST\\\",\\\"JUMPY\\\",\\\"JOKER\\\",\\\"JAUNT\\\",\\\"JERKY\\\",\\\"JUDGE\\\",\\\"JOINT\\\",\\\"JOINS\\\",\\\"JUMPS\\\",\\r\\n    // K\\r\\n    \\\"KNAVE\\\",\\\"KNIFE\\\",\\\"KIOSK\\\",\\\"KNELT\\\",\\\"KNURL\\\",\\\"KRAIT\\\",\\\"KUDOS\\\",\\\"KAPUT\\\",\\\"KNEAD\\\",\\\"KARST\\\",\\r\\n    // L\\r\\n    \\\"LIGHT\\\",\\\"LASER\\\",\\\"LEMON\\\",\\\"LAPIS\\\",\\\"LUNAR\\\",\\\"LYMPH\\\",\\\"LOCUS\\\",\\\"LOGIC\\\",\\\"LODGE\\\",\\\"LATCH\\\",\\r\\n    // M\\r\\n    \\\"MOUSE\\\",\\\"MINTY\\\",\\\"MAGIC\\\",\\\"MAPLE\\\",\\\"MANGO\\\",\\\"MOCHA\\\",\\\"MOVIE\\\",\\\"MOUND\\\",\\\"MINOR\\\",\\\"MURAL\\\",\\r\\n    // N\\r\\n    \\\"NOVEL\\\",\\\"NURSE\\\",\\\"NIGHT\\\",\\\"NEXUS\\\",\\\"NOBLE\\\",\\\"NUDGE\\\",\\\"NORTH\\\",\\\"NIFTY\\\",\\\"NADIR\\\",\\\"NOISE\\\",\\r\\n    // O\\r\\n    \\\"ORBIT\\\",\\\"OCEAN\\\",\\\"OLIVE\\\",\\\"OPTIC\\\",\\\"OUTER\\\",\\\"OUGHT\\\",\\\"OPERA\\\",\\\"OKAPI\\\",\\\"OPIUM\\\",\\\"OWING\\\",\\r\\n    // P\\r\\n    \\\"PINGS\\\",\\\"PAVED\\\",\\\"PIANO\\\",\\\"PEACH\\\",\\\"PLUME\\\",\\\"PRISM\\\",\\\"PARTY\\\",\\\"PLANT\\\",\\\"PROVE\\\",\\\"PUNCH\\\",\\r\\n    // Q\\r\\n    \\\"QUACK\\\",\\\"QUICK\\\",\\\"QUEST\\\",\\\"QUILT\\\",\\\"QUARK\\\",\\\"QUOTA\\\",\\\"QUIET\\\",\\\"QUOTE\\\",\\\"QUAIL\\\",\\\"QUASH\\\",\\r\\n    // R\\r\\n    \\\"RADIO\\\",\\\"ROGUE\\\",\\\"RIDGE\\\",\\\"REALM\\\",\\\"RANCH\\\",\\\"RATIO\\\",\\\"ROAST\\\",\\\"RUINS\\\",\\\"RAVEN\\\",\\\"ROUND\\\",\\r\\n    // S\\r\\n    \\\"STORM\\\",\\\"SNAKE\\\",\\\"SMILE\\\",\\\"SOLAR\\\",\\\"SWIFT\\\",\\\"SQUIB\\\",\\\"SPUNK\\\",\\\"STAGE\\\",\\\"SOUND\\\",\\\"STERN\\\",\\r\\n    // T\\r\\n    \\\"TIGER\\\",\\\"TOWER\\\",\\\"TULIP\\\",\\\"TEMPO\\\",\\\"TORCH\\\",\\\"THWAX\\\",\\\"THORN\\\",\\\"TREND\\\",\\\"TRUNK\\\",\\\"TANGO\\\",\\r\\n    // U\\r\\n    \\\"UNCLE\\\",\\\"UNITY\\\",\\\"ULTRA\\\",\\\"UNBOX\\\",\\\"URBAN\\\",\\\"USAGE\\\",\\\"UNTIL\\\",\\\"UPSET\\\",\\\"USHER\\\",\\\"UTILE\\\",\\r\\n    // V\\r\\n    \\\"VELDT\\\",\\\"VIRUS\\\",\\\"VIPER\\\",\\\"VAPOR\\\",\\\"VOWEL\\\",\\\"VALOR\\\",\\\"VIGOR\\\",\\\"VISTA\\\",\\\"VENOM\\\",\\\"VIXEN\\\",\\r\\n    // W\\r\\n    \\\"WALTZ\\\",\\\"WORLD\\\",\\\"WHALE\\\",\\\"WHEAT\\\",\\\"WOVEN\\\",\\\"WRUNG\\\",\\\"WACKY\\\",\\\"WOMAN\\\",\\\"WATER\\\",\\\"WINDY\\\",\\r\\n    // X\\r\\n    \\\"XYLEM\\\",\\\"XERUS\\\",\\\"XENIA\\\",\\\"XENIC\\\",\\\"XERIC\\\",\\\"XENOS\\\",\\\"XYSTI\\\",\\\"XYLAN\\\",\\\"XYSTE\\\",\\\"XEROS\\\",\\r\\n    // Y\\r\\n    \\\"YOUTH\\\",\\\"YACHT\\\",\\\"YOUNG\\\",\\\"YODEL\\\",\\\"YIELD\\\",\\\"YOKEL\\\",\\\"YEARN\\\",\\\"YAWNS\\\",\\\"YEAST\\\",\\\"YELPS\\\",\\r\\n    // Z\\r\\n    \\\"ZEBRA\\\",\\\"ZESTY\\\",\\\"ZONAL\\\",\\\"ZONED\\\",\\\"ZONER\\\",\\\"ZILCH\\\",\\\"ZLOTY\\\",\\\"ZYMIC\\\",\\\"ZYGON\\\",\\\"ZEBUS\\\"\\r\\n  ];\\r\\n\\r\\n  function hasUniqueLetters(string memory word) internal pure returns (bool) {\\r\\n    bytes memory w = bytes(word);\\r\\n    if (w.length != WORD_LENGTH) return false;\\r\\n    bool[26] memory seen;\\r\\n    for (uint256 i = 0; i < w.length; ++i) {\\r\\n      uint8 c = uint8(w[i]);\\r\\n      if (c < 65 || c > 90) return false; // uppercase A..Z\\r\\n      uint8 idx = c - 65;\\r\\n      if (seen[idx]) return false;\\r\\n      seen[idx] = true;\\r\\n    }\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function _getTodayUniqueWordIndex() internal view returns (uint256) {\\r\\n    uint256 base = dailySeed % wordList.length;\\r\\n    for (uint256 i = 0; i < wordList.length; i++) {\\r\\n      uint256 idx = (base + i) % wordList.length;\\r\\n      if (hasUniqueLetters(wordList[idx])) {\\r\\n        return idx;\\r\\n      }\\r\\n    }\\r\\n    revert(\\\"No unique-letter word available\\\");\\r\\n  }\\r\\n\\r\\n  function _setTodayWord() internal {\\r\\n    string memory todayWord = wordList[_getTodayUniqueWordIndex()];\\r\\n    bytes memory b = bytes(todayWord);\\r\\n    // Convert to bytes5\\r\\n    targetWord = bytes5(b);\\r\\n  }\\r\\n\\r\\n  /// @notice Update the daily seed and target word (idempotent if same day)\\r\\n  function updateDailySeed() public {\\r\\n    uint256 currentDay = block.timestamp / 86400;\\r\\n    if (currentDay != lastSeedDay) {\\r\\n      dailySeed = uint256(\\r\\n        keccak256(abi.encodePacked(currentDay, blockhash(block.number - 1)))\\r\\n      );\\r\\n      lastSeedDay = currentDay;\\r\\n      emit DailyWordUpdated(currentDay);\\r\\n      _setTodayWord();\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Initialize today's game for caller\\r\\n  function initializeDailyGame() external {\\r\\n    uint256 currentDay = block.timestamp / 86400;\\r\\n    require(\\r\\n      !games[msg.sender].initialized || games[msg.sender].gameDay != currentDay,\\r\\n      \\\"Game already initialized today\\\"\\r\\n    );\\r\\n\\r\\n    updateDailySeed();\\r\\n    _setTodayWord();\\r\\n\\r\\n    games[msg.sender] = Game({\\r\\n      initialized: true,\\r\\n      guessCount: 0,\\r\\n      completed: false,\\r\\n      won: false,\\r\\n      gameDay: currentDay\\r\\n    });\\r\\n\\r\\n    emit GameInitialized(msg.sender);\\r\\n  }\\r\\n\\r\\n  /// @notice Submit a plaintext guess and get per-position results\\r\\n  /// @param guess 5-letter uppercase ASCII word\\r\\n  /// @return results array: 0 = not in word, 1 = in word wrong position, 2 = correct position\\r\\n  function submitGuess(string calldata guess) external returns (uint8[5] memory) {\\r\\n    require(games[msg.sender].initialized, \\\"Game not initialized\\\");\\r\\n    require(!games[msg.sender].completed, \\\"Game already completed\\\");\\r\\n    require(games[msg.sender].guessCount < MAX_GUESSES, \\\"Maximum guesses reached\\\");\\r\\n\\r\\n    bytes memory g = bytes(guess);\\r\\n    require(g.length == WORD_LENGTH, \\\"Guess must be 5 letters\\\");\\r\\n    for (uint256 i = 0; i < WORD_LENGTH; i++) {\\r\\n      uint8 c = uint8(g[i]);\\r\\n      require(c >= 65 && c <= 90, \\\"Only uppercase A..Z allowed\\\");\\r\\n    }\\r\\n\\r\\n    // Compare with target\\r\\n    uint8[5] memory results;\\r\\n    bool allCorrect = true;\\r\\n\\r\\n    // Access target bytes\\r\\n    bytes5 tw = targetWord;\\r\\n\\r\\n    for (uint8 i = 0; i < WORD_LENGTH; i++) {\\r\\n      uint8 gc = uint8(g[i]);\\r\\n      uint8 tc = uint8(tw[i]);\\r\\n\\r\\n      if (gc == tc) {\\r\\n        results[i] = 2; // correct position\\r\\n      } else {\\r\\n        // Check existence in other positions (unique-letter list simplifies handling)\\r\\n        bool inWord = false;\\r\\n        for (uint8 j = 0; j < WORD_LENGTH; j++) {\\r\\n          if (j == i) continue;\\r\\n          if (gc == uint8(tw[j])) {\\r\\n            inWord = true;\\r\\n            break;\\r\\n          }\\r\\n        }\\r\\n        results[i] = inWord ? 1 : 0;\\r\\n        allCorrect = false;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    // Update game state\\r\\n    games[msg.sender].guessCount++;\\r\\n    if (allCorrect) {\\r\\n      games[msg.sender].completed = true;\\r\\n      games[msg.sender].won = true;\\r\\n      emit GameCompleted(msg.sender, true);\\r\\n    } else if (games[msg.sender].guessCount >= MAX_GUESSES) {\\r\\n      games[msg.sender].completed = true;\\r\\n      emit GameCompleted(msg.sender, false);\\r\\n    }\\r\\n\\r\\n    emit GuessSubmitted(msg.sender, games[msg.sender].guessCount);\\r\\n    return results;\\r\\n  }\\r\\n\\r\\n  /// @notice Returns true if a new daily word is available for caller\\r\\n  function hasNewDailyWord() external view returns (bool) {\\r\\n    uint256 currentDay = block.timestamp / 86400;\\r\\n    return !games[msg.sender].initialized || games[msg.sender].gameDay != currentDay;\\r\\n  }\\r\\n\\r\\n  /// @notice Reset the caller's game state\\r\\n  function resetGame() external {\\r\\n    if (games[msg.sender].initialized) {\\r\\n      games[msg.sender].initialized = false;\\r\\n      games[msg.sender].guessCount = 0;\\r\\n      games[msg.sender].completed = false;\\r\\n      games[msg.sender].won = false;\\r\\n    }\\r\\n    emit GameReset(msg.sender);\\r\\n  }\\r\\n\\r\\n  /// @notice Owner can add new unique-letter word to the list\\r\\n  function addWord(string calldata newWord) external {\\r\\n    require(msg.sender == owner, \\\"Only owner\\\");\\r\\n    require(bytes(newWord).length == WORD_LENGTH, \\\"Word must be 5 letters\\\");\\r\\n\\r\\n    bool[] memory seen = new bool[](26);\\r\\n    bytes memory w = bytes(newWord);\\r\\n    for (uint256 i = 0; i < w.length; i++) {\\r\\n      uint8 c = uint8(w[i]);\\r\\n      require(c >= 65 && c <= 90, \\\"Invalid character\\\");\\r\\n      uint8 idx = c - 65;\\r\\n      require(!seen[idx], \\\"Duplicate letter\\\");\\r\\n      seen[idx] = true;\\r\\n    }\\r\\n\\r\\n    wordList.push(newWord);\\r\\n  }\\r\\n}\",\"keccak256\":\"0x38c5cd1b6cfc553b00a162b14fc12714466f503f9a72296c9faf0eb762fdd9ca\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60056121008181526441574f4b4560d81b6121205260809081526121408281526420a624a2a760d91b6121605260a0526121808281526420a624a3a760d91b6121a05260c0526121c08281526441474c4f5760d81b6121e05260e0526122008281526441444f524560d81b61222052610100526122408281526420a12427a960d91b61226052610120526122808281526420a1aa27a960d91b6122a052610140526122c082815264414355544560d81b6122e0526101605261230082815264105111541560da1b612320526101805261234082815264414c42554d60d81b612360526101a05261238082815264424c414e4b60d81b6123a0526101c0526123c082815264425249534b60d81b6123e0526101e052612400828152641093d5539160da1b61242052610200526124408281526442414e4a4f60d81b61246052610220526124808281526408498aaa6960db1b6124a052610240526124c082815264425255544560d81b6124e0526102605261250082815264042494345560dc1b61252052610280526125408281526442454c4f5760d81b612560526102a05261258082815264109313d05560da1b6125a0526102c0526125c082815264212920a4a760d91b6125e0526102e052612600828152644352414e4560d81b6126205261030052612640828152644348414c4b60d81b61266052610320526126808281526410d3d5915560da1b6126a052610340526126c08281526421aaa6a4a760d91b6126e0526103605261270082815264434f42524160d81b61272052610380526127408281526443414e445960d81b612760526103a05261278082815264434c4f4e4560d81b6127a0526103c0526127c08281526410d3d5539560da1b6127e0526103e052612800828152644355524c5960d81b61282052610400526128408281526421a2a220a960d91b612860526104205261288082815264111490519560da1b6128a052610440526128c08281526444524f4e4560d81b6128e05261046052612900828152644452494e4b60d81b6129205261048052612940828152641113d5509560da1b612960526104a05261298082815264222927aba760d91b6129a0526104c0526129c082815264111555915560da1b6129e0526104e052612a008281526444524f505360d81b612a205261050052612a408281526444494e474f60d81b612a605261052052612a808281526444494d4c5960d81b612aa05261054052612ac082815264111150d05360da1b612ae05261056052612b008281526408aa09e86960db1b612b205261058052612b4082815264454c424f5760d81b612b60526105a052612b808281526411539050d560da1b612ba0526105c052612bc082815264045515549560dc1b612be0526105e052612c0082815264115615531560da1b612c205261060052612c4082815264454d50545960d81b612c605261062052612c8082815264455448494360d81b612ca05261064052612cc082815264455854524160d81b612ce05261066052612d0082815264454e4a4f5960d81b612d205261068052612d4082815264115455505360da1b612d60526106a052612d8082815264119493d4d560da1b612da0526106c052612dc082815264464c494e4760d81b612de0526106e052612e0082815264464c55544560d81b612e205261070052612e4082815264119293d49160da1b612e605261072052612e8082815264119490555160da1b612ea05261074052612ec0828152644641424c4560d81b612ee05261076052612f0082815264119152539560da1b612f205261078052612f4082815264464f43555360d81b612f60526107a052612f80828152644652414d4560d81b612fa0526107c052612fc082815264464c414b5960d81b612fe0526107e0526130008281526411d312539560da1b613020526108005261304082815264047524f55560dc1b613060526108205261308082815264475241434560d81b6130a052610840526130c08281526447554d424f60d81b6130e0526108605261310082815264475549444560d81b61312052610880526131408281526423a920a4a760d91b613160526108a05261318082815264474c41444560d81b6131a0526108c0526131c08281526411d492539160da1b6131e0526108e0526132008281526408ea482a0960db1b61322052610900526132408281526423a927aba760d91b613260526109205261328082815264121150549560da1b6132a052610940526132c08281526448414e445960d81b6132e0526109605261330082815264484153544560d81b6133205261098052613340828152642420ab22a760d91b613360526109a05261338082815264484f52534560d81b6133a0526109c0526133c0828152641213d5539160da1b6133e0526109e05261340082815264121553525160da1b61342052610a00526134408281526448494e474560d81b61346052610a2052613480828152641213d5115360da1b6134a052610a40526134c082815264242ca822a960d91b6134e052610a6052613500828152640929c888ab60db1b61352052610a80526135408281526449564f525960d81b61356052610aa05261358082815264125111505360da1b6135a052610ac0526135c082815264125394155560da1b6135e052610ae05261360082815264125393115560da1b61362052610b005261364082815264495241544560d81b61366052610b205261368082815264494d41474560d81b6136a052610b40526136c082815264494d42554560d81b6136e052610b60526137008281526424a72322a960d91b61372052610b8052613740828152640929c849eb60db1b61376052610ba052613780828152644a554d424f60d81b6137a052610bc0526137c0828152641293d554d560da1b6137e052610be052613800828152644a554d505960d81b61382052610c0052613840828152642527a5a2a960d91b61386052610c205261388082815264129055539560da1b6138a052610c40526138c0828152644a45524b5960d81b6138e052610c6052613900828152644a5544474560d81b61392052610c8052613940828152641293d2539560da1b61396052610ca052613980828152644a4f494e5360d81b6139a052610cc0526139c0828152644a554d505360d81b6139e052610ce052613a00828152644b4e41564560d81b613a2052610d0052613a40828152644b4e49464560d81b613a6052610d2052613a80828152644b494f534b60d81b613aa052610d4052613ac08281526412d391531560da1b613ae052610d6052613b008281526412d395549360da1b613b2052610d8052613b408281526412d490525560da1b613b6052610da052613b80828152644b55444f5360d81b613ba052610dc052613bc08281526412d054155560da1b613be052610de052613c008281526412d391505160da1b613c2052610e0052613c408281526412d05494d560da1b613c6052610e2052613c8082815264131251d21560da1b613ca052610e4052613cc0828152642620a9a2a960d91b613ce052610e6052613d00828152642622a6a7a760d91b613d2052610e8052613d40828152644c4150495360d81b613d6052610ea052613d8082815264262aa720a960d91b613da052610ec052613dc082815264098b29aa0960db1b613de052610ee052613e00828152644c4f43555360d81b613e2052610f0052613e40828152644c4f47494360d81b613e6052610f2052613e80828152644c4f44474560d81b613ea052610f4052613ec08281526409882a886960db1b613ee052610f6052613f00828152644d4f55534560d81b613f2052610f8052613f40828152644d494e545960d81b613f6052610fa052613f80828152644d4147494360d81b613fa052610fc052613fc0828152644d41504c4560d81b613fe052610fe052614000828152644d414e474f60d81b6140205261100052614040828152644d4f43484160d81b6140605261102052614080828152644d4f56494560d81b6140a052611040526140c0828152641353d5539160da1b6140e052611060526141008281526426a4a727a960d91b614120526110805261414082815264135554905360da1b614160526110a052614180828152641393d5915360da1b6141a0526110c0526141c0828152644e5552534560d81b6141e0526110e05261420082815264139251d21560da1b6142205261110052614240828152644e4558555360d81b6142605261112052614280828152644e4f424c4560d81b6142a052611140526142c0828152644e5544474560d81b6142e052611160526143008281526409c9ea4a8960db1b6143205261118052614340828152644e4946545960d81b614360526111a052614380828152642720a224a960d91b6143a0526111c0526143c0828152644e4f49534560d81b6143e0526111e0526144008281526413d490925560da1b61442052611200526144408281526427a1a2a0a760d91b6144605261122052614480828152644f4c49564560d81b6144a052611240526144c0828152644f5054494360d81b6144e052611260526145008281526427aaaa22a960d91b61452052611280526145408281526413d551d21560da1b614560526112a052614580828152644f5045524160d81b6145a0526112c0526145c0828152644f4b41504960d81b6145e0526112e052614600828152644f5049554d60d81b6146205261130052614640828152644f57494e4760d81b61466052611320526146808281526450494e475360d81b6146a052611340526146c082815264141055915160da1b6146e05261136052614700828152645049414e4f60d81b6147205261138052614740828152640a08a8286960db1b614760526113a05261478082815264504c554d4560d81b6147a0526113c0526147c082815264505249534d60d81b6147e0526113e05261480082815264504152545960d81b614820526114005261484082815264141310539560da1b61486052611420526148808281526450524f564560d81b6148a052611440526148c0828152640a0aa9c86960db1b6148e0526114605261490082815264515541434b60d81b614920526114805261494082815264515549434b60d81b614960526114a0526149808281526414555154d560da1b6149a0526114c0526149c082815264145552531560da1b6149e0526114e052614a0082815264515541524b60d81b614a205261150052614a408281526451554f544160d81b614a605261152052614a8082815264145552515560da1b614aa05261154052614ac08281526451554f544560d81b614ae05261156052614b0082815264145550525360da1b614b205261158052614b40828152640a2aa82a6960db1b614b60526115a052614b8082815264524144494f60d81b614ba0526115c052614bc082815264524f47554560d81b614be0526115e052614c0082815264524944474560d81b614c205261160052614c40828152645245414c4d60d81b614c605261162052614c80828152640a4829c86960db1b614ca05261164052614cc082815264524154494f60d81b614ce05261166052614d00828152641493d054d560da1b614d205261168052614d40828152645255494e5360d81b614d60526116a052614d80828152642920ab22a760d91b614da0526116c052614dc0828152641493d5539160da1b614de0526116e052614e008281526453544f524d60d81b614e205261170052614e4082815264534e414b4560d81b614e605261172052614e8082815264534d494c4560d81b614ea05261174052614ec08281526429a7a620a960d91b614ee05261176052614f008281526414d5d2519560da1b614f205261178052614f408281526429a8aaa4a160d91b614f60526117a052614f80828152645350554e4b60d81b614fa0526117c052614fc082815264535441474560d81b614fe0526117e0526150008281526414d3d5539160da1b61502052611800526150408281526429aa22a92760d91b6150605261182052615080828152642a24a3a2a960d91b6150a0526118409081526150c0838152642a27aba2a960d91b6150e0526118605261510083815264054554c49560dc1b61512052611880526151408381526454454d504f60d81b615160526118a052615180838152640a89ea486960db1b6151a0526118c0526151c0838152640a890ae82b60db1b6151e0526118e052615200838152642a2427a92760d91b615220526119005261524083815264151491539160da1b6152605261192052615280838152645452554e4b60d81b6152a052611940526152c08381526454414e474f60d81b6152e0526119605261530083815264554e434c4560d81b615320526119805261534083815264554e49545960d81b615360526119a05261538083815264554c54524160d81b6153a0526119c0526153c0838152640aa9c849eb60db1b6153e0526119e052615400838152642aa92120a760d91b61542052611a005261544083815264555341474560d81b61546052611a205261548083815264155395125360da1b6154a052611a40526154c083815264155414d15560da1b6154e052611a6052615500838152642aa9a422a960d91b61552052611a8052615540838152645554494c4560d81b61556052611aa05261558083815264159153111560da1b6155a052611ac0526155c083815264564952555360d81b6155e052611ae052615600838152642b24a822a960d91b61562052611b0052615640838152642b20a827a960d91b61566052611b2052615680838152641593d5d15360da1b6156a052611b40526156c0838152642b20a627a960d91b6156e052611b6052615700838152642b24a3a7a960d91b61572052611b805261574083815264564953544160d81b61576052611ba0526157808381526456454e4f4d60d81b6157a052611bc05261580060409081526157c0848152642b24ac22a760d91b6157e052611be0529192602092909181518083018352838152642ba0a62a2d60d91b818601526103c0820152815180830183528381526415d3d4931160da1b818601526103e082015281518083018352838152645748414c4560d81b81860152610400820152815180830183528381526415d211505560da1b8186015261042082015281518083018352838152642ba7ab22a760d91b8186015261044082015281518083018352838152645752554e4760d81b8186015261046082015281518083018352838152645741434b5960d81b8186015261048082015281518083018352838152642ba7a6a0a760d91b818601526104a082015281518083018352838152642ba0aa22a960d91b818601526104c0820152815180830183528381526457494e445960d81b818601526104e0820152815180830183528381526458594c454d60d81b818601526105008201528151808301835283815264584552555360d81b81860152610520820152815180830183528381526458454e494160d81b81860152610540820152815180830183528381526458454e494360d81b818601526105608201528151808301835283815264584552494360d81b81860152610580820152815180830183528381526458454e4f5360d81b818601526105a08201528151808301835283815264585953544960d81b818601526105c082015281518083018352838152642c2ca620a760d91b818601526105e08201528151808301835283815264585953544560d81b8186015261060082015281518083018352838152645845524f5360d81b8186015261062082015281518083018352838152640b29eaaa8960db1b818601526106408201528151808301835283815264165050d21560da1b818601526106608201528151808301835283815264594f554e4760d81b8186015261068082015281518083018352838152641653d1115360da1b818601526106a08201528151808301835283815264165251531160da1b818601526106c082015281518083018352838152641653d2d15360da1b818601526106e082015281518083018352838152642ca2a0a92760d91b8186015261070082015281518083018352838152645941574e5360d81b81860152610720820152815180830183528381526416515054d560da1b81860152610740820152815180830183528381526459454c505360d81b8186015261076082015281518083018352838152645a4542524160d81b8186015261078082015281518083018352838152645a4553545960d81b818601526107a082015281518083018352838152641693d3905360da1b818601526107c082015281518083018352838152641693d3915160da1b818601526107e082015281518083018352838152642d27a722a960d91b8186015261080082015281518083018352838152640b4929886960db1b8186015261082082015281518083018352838152645a4c4f545960d81b8186015261084082015281518083018352838152645a594d494360d81b8186015261086082015281518083018352838152642d2ca3a7a760d91b818601526108808201528151808301909252918152645a4542555360d81b928101929092526108a0015261186e90600490610104611c36565b5034801561187a575f5ffd5b5060018054600160281b600160c81b0319163365010000000000021790556118a06118ad565b6118a8611940565b611f42565b5f6118bb6201518042611d33565b9050600354811461193d57806118d2600143611d46565b406040516020016118ed929190918252602082015260400190565b60408051601f19818403018152908290528051602090910120600255600382905581907f0e70c84908991bee7f9bb917a18e4fe2ed297ad218e2b8b3241c2ce32b0d970f905f90a261193d611940565b50565b5f600461194b611a16565b8154811061195b5761195b611d5f565b905f5260205f2001805461196e90611d73565b80601f016020809104026020016040519081016040528092919081815260200182805461199a90611d73565b80156119e55780601f106119bc576101008083540402835291602001916119e5565b820191905f5260205f20905b8154815290600101906020018083116119c857829003601f168201915b505050505090505f819050806119fa90611dab565b6001805464ffffffffff191660d89290921c9190911790555050565b6004546002545f918291611a2a9190611de9565b90505f5b600454811015611b13576004545f90611a478385611dfc565b611a519190611de9565b9050611afe60048281548110611a6957611a69611d5f565b905f5260205f20018054611a7c90611d73565b80601f0160208091040260200160405190810160405280929190818152602001828054611aa890611d73565b8015611af35780601f10611aca57610100808354040283529160200191611af3565b820191905f5260205f20905b815481529060010190602001808311611ad657829003601f168201915b5050611b6092505050565b15611b0a579392505050565b50600101611a2e565b5060405162461bcd60e51b815260206004820152601f60248201527f4e6f20756e697175652d6c657474657220776f726420617661696c61626c6500604482015260640160405180910390fd5b80515f908290600514611b7557505f92915050565b611b7d611c8a565b5f5b8251811015611c2b575f838281518110611b9b57611b9b611d5f565b016020015160f81c90506041811080611bb75750605a8160ff16115b15611bc757505f95945050505050565b5f611bd3604183611e0f565b9050838160ff16601a8110611bea57611bea611d5f565b602002015115611c0057505f9695505050505050565b6001848260ff16601a8110611c1757611c17611d5f565b911515602090920201525050600101611b7f565b506001949350505050565b828054828255905f5260205f20908101928215611c7a579160200282015b82811115611c7a5782518290611c6a9082611e88565b5091602001919060010190611c54565b50611c86929150611ca9565b5090565b604051806103400160405280601a906020820280368337509192915050565b80821115611c86575f611cbc8282611cc5565b50600101611ca9565b508054611cd190611d73565b5f825580601f10611ce0575050565b601f0160209004905f5260205f209081019061193d91905b80821115611c86575f8155600101611cf8565b634e487b7160e01b5f52601260045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b5f82611d4157611d41611d0b565b500490565b81810381811115611d5957611d59611d1f565b92915050565b634e487b7160e01b5f52603260045260245ffd5b600181811c90821680611d8757607f821691505b602082108103611da557634e487b7160e01b5f52602260045260245ffd5b50919050565b805160208201516001600160d81b0319811691906005821015611de2576001600160d81b0319600583900360031b81901b82161692505b5050919050565b5f82611df757611df7611d0b565b500690565b80820180821115611d5957611d59611d1f565b60ff8281168282160390811115611d5957611d59611d1f565b634e487b7160e01b5f52604160045260245ffd5b601f821115611e8357805f5260205f20601f840160051c81016020851015611e615750805b601f840160051c820191505b81811015611e80575f8155600101611e6d565b50505b505050565b81516001600160401b03811115611ea157611ea1611e28565b611eb581611eaf8454611d73565b84611e3c565b6020601f821160018114611ee7575f8315611ed05750848201515b5f19600385901b1c1916600184901b178455611e80565b5f84815260208120601f198516915b82811015611f165787850151825560209485019460019092019101611ef6565b5084821015611f3357868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b61114780611f4f5f395ff3fe608060405234801561000f575f5ffd5b506004361061006f575f3560e01c8063b002343b1161004d578063b002343b14610098578063b4fdb516146100c1578063bb472219146100d9575f5ffd5b80634974da81146100735780636b4a970314610088578063a443076114610090575b5f5ffd5b610086610081366004610e1f565b6100e1565b005b610086610377565b61008661040a565b6100ab6100a6366004610e1f565b61056f565b6040516100b89190610e8d565b60405180910390f35b6100c9610a44565b60405190151581526020016100b8565b610086610a8b565b60015465010000000000900473ffffffffffffffffffffffffffffffffffffffff1633146101565760405162461bcd60e51b815260206004820152600a60248201527f4f6e6c79206f776e65720000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b600581146101a65760405162461bcd60e51b815260206004820152601660248201527f576f7264206d7573742062652035206c65747465727300000000000000000000604482015260640161014d565b60408051601a80825261036082019092525f9160208201610340803683370190505090505f83838080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201829052509394505050505b8151811015610333575f82828151811061021f5761021f610ed4565b016020015160f81c90506041811080159061023e5750605a8160ff1611155b61028a5760405162461bcd60e51b815260206004820152601160248201527f496e76616c696420636861726163746572000000000000000000000000000000604482015260640161014d565b5f610296604183610efc565b9050848160ff16815181106102ad576102ad610ed4565b6020026020010151156103025760405162461bcd60e51b815260206004820152601060248201527f4475706c6963617465206c657474657200000000000000000000000000000000604482015260640161014d565b6001858260ff168151811061031957610319610ed4565b911515602092830291909101909101525050600101610203565b50600480546001810182555f919091527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b01610370848683610f96565b5050505050565b5f6103856201518042611064565b90506003548114610407578061039c600143611077565b406040516020016103b7929190918252602082015260400190565b60408051601f19818403018152908290528051602090910120600255600382905581907f0e70c84908991bee7f9bb917a18e4fe2ed297ad218e2b8b3241c2ce32b0d970f905f90a2610407610af1565b50565b5f6104186201518042611064565b335f9081526020819052604090205490915060ff16158061044a5750335f908152602081905260409020600101548114155b6104965760405162461bcd60e51b815260206004820152601e60248201527f47616d6520616c726561647920696e697469616c697a656420746f6461790000604482015260640161014d565b61049e610377565b6104a6610af1565b6040805160a08101825260018082525f6020808401828152848601838152606086018481526080870189815233808752868652958990209751885494519351925161ffff1990951690151561ff0019161761010060ff909416939093029290921763ffff00001916620100009115159190910263ff00000019161763010000009215159290920291909117855551939092019290925591519081527fada0ba55ddd90bb25ecc3a5e99986836201565b3a09e5be156e48713da1bfd63910160405180910390a150565b610577610de2565b335f9081526020819052604090205460ff166105d55760405162461bcd60e51b815260206004820152601460248201527f47616d65206e6f7420696e697469616c697a6564000000000000000000000000604482015260640161014d565b335f9081526020819052604090205462010000900460ff161561063a5760405162461bcd60e51b815260206004820152601660248201527f47616d6520616c726561647920636f6d706c6574656400000000000000000000604482015260640161014d565b335f90815260208190526040902054600661010090910460ff16106106a15760405162461bcd60e51b815260206004820152601760248201527f4d6178696d756d20677565737365732072656163686564000000000000000000604482015260640161014d565b5f83838080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92019190915250508251929350505060051461072b5760405162461bcd60e51b815260206004820152601760248201527f4775657373206d7573742062652035206c657474657273000000000000000000604482015260640161014d565b5f5b60058110156107bd575f82828151811061074957610749610ed4565b016020015160f81c9050604181108015906107685750605a8160ff1611155b6107b45760405162461bcd60e51b815260206004820152601b60248201527f4f6e6c792075707065726361736520412e2e5a20616c6c6f7765640000000000604482015260640161014d565b5060010161072d565b506107c6610de2565b6001805460d81b5f5b600560ff821610156108d5575f858260ff16815181106107f1576107f1610ed4565b016020015160f81c90505f8360ff84166005811061081157610811610ed4565b1a905060ff8216819003610848576002868460ff166005811061083657610836610ed4565b60ff90921660209290920201526108cb565b5f805b600560ff82161015610895578460ff168160ff16031561088d57858160ff166005811061087a5761087a610ed4565b1a60ff85160361088d5760019150610895565b60010161084b565b50806108a1575f6108a4565b60015b878560ff16600581106108b9576108b9610ed4565b60ff9092166020929092020152505f94505b50506001016107cf565b50335f9081526020819052604090208054610100900460ff169060016108fa8361108a565b91906101000a81548160ff021916908360ff16021790555050811561097557335f8181526020818152604091829020805463ffff00001916630101000017905581519283526001908301527f9b830e6ccbf17da6759bc3bab3e198411a4d141451c048d4529e4f377bedd446910160405180910390a16109ea565b335f90815260208190526040902054600661010090910460ff16106109ea57335f81815260208181526040808320805462ff00001916620100001790558051938452908301919091527f9b830e6ccbf17da6759bc3bab3e198411a4d141451c048d4529e4f377bedd446910160405180910390a15b335f8181526020818152604091829020548251938452610100900460ff16908301527f17f532dd235deda5af44a6b92010fc363a16f9cbcee386385d1191363f40f20c910160405180910390a15090925050505b92915050565b5f80610a536201518042611064565b335f9081526020819052604090205490915060ff161580610a855750335f908152602081905260409020600101548114155b91505090565b335f9081526020819052604090205460ff1615610abc57335f908152602081905260409020805463ffffffff191690555b6040513381527f5c5242c86e1c99f381866c8c3d6542c0f9691ec890edfe6699def7dafa9a34f69060200160405180910390a1565b5f6004610afc610bc7565b81548110610b0c57610b0c610ed4565b905f5260205f20018054610b1f90610f15565b80601f0160208091040260200160405190810160405280929190818152602001828054610b4b90610f15565b8015610b965780601f10610b6d57610100808354040283529160200191610b96565b820191905f5260205f20905b815481529060010190602001808311610b7957829003601f168201915b505050505090505f81905080610bab906110a8565b6001805464ffffffffff191660d89290921c9190911790555050565b6004546002545f918291610bdb9190611114565b90505f5b600454811015610cc3576004545f90610bf88385611127565b610c029190611114565b9050610cae60048281548110610c1a57610c1a610ed4565b905f5260205f20018054610c2d90610f15565b80601f0160208091040260200160405190810160405280929190818152602001828054610c5990610f15565b8015610ca45780601f10610c7b57610100808354040283529160200191610ca4565b820191905f5260205f20905b815481529060010190602001808311610c8757829003601f168201915b5050505050610d0c565b15610cba579392505050565b50600101610bdf565b5060405162461bcd60e51b815260206004820152601f60248201527f4e6f20756e697175652d6c657474657220776f726420617661696c61626c6500604482015260640161014d565b80515f908290600514610d2157505f92915050565b610d29610e00565b5f5b8251811015610dd7575f838281518110610d4757610d47610ed4565b016020015160f81c90506041811080610d635750605a8160ff16115b15610d7357505f95945050505050565b5f610d7f604183610efc565b9050838160ff16601a8110610d9657610d96610ed4565b602002015115610dac57505f9695505050505050565b6001848260ff16601a8110610dc357610dc3610ed4565b911515602090920201525050600101610d2b565b506001949350505050565b6040518060a001604052806005906020820280368337509192915050565b604051806103400160405280601a906020820280368337509192915050565b5f5f60208385031215610e30575f5ffd5b823567ffffffffffffffff811115610e46575f5ffd5b8301601f81018513610e56575f5ffd5b803567ffffffffffffffff811115610e6c575f5ffd5b856020828401011115610e7d575f5ffd5b6020919091019590945092505050565b60a0810181835f5b6005811015610eb757815160ff16835260209283019290910190600101610e95565b50505092915050565b634e487b7160e01b5f52604160045260245ffd5b634e487b7160e01b5f52603260045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b60ff8281168282160390811115610a3e57610a3e610ee8565b600181811c90821680610f2957607f821691505b602082108103610f4757634e487b7160e01b5f52602260045260245ffd5b50919050565b601f821115610f9157805f5260205f20601f840160051c81016020851015610f725750805b601f840160051c820191505b81811015610370575f8155600101610f7e565b505050565b67ffffffffffffffff831115610fae57610fae610ec0565b610fc283610fbc8354610f15565b83610f4d565b5f601f841160018114610ff3575f8515610fdc5750838201355b5f19600387901b1c1916600186901b178355610370565b5f83815260208120601f198716915b828110156110225786850135825560209485019460019092019101611002565b508682101561103e575f1960f88860031b161c19848701351681555b505060018560011b0183555050505050565b634e487b7160e01b5f52601260045260245ffd5b5f8261107257611072611050565b500490565b81810381811115610a3e57610a3e610ee8565b5f60ff821660ff810361109f5761109f610ee8565b60010192915050565b805160208201517fffffffffff00000000000000000000000000000000000000000000000000000081169190600582101561110d577fffffffffff000000000000000000000000000000000000000000000000000000808360050360031b1b82161692505b5050919050565b5f8261112257611122611050565b500690565b80820180821115610a3e57610a3e610ee856fea164736f6c634300081b000a",
  "deployedBytecode": "0x608060405234801561000f575f5ffd5b506004361061006f575f3560e01c8063b002343b1161004d578063b002343b14610098578063b4fdb516146100c1578063bb472219146100d9575f5ffd5b80634974da81146100735780636b4a970314610088578063a443076114610090575b5f5ffd5b610086610081366004610e1f565b6100e1565b005b610086610377565b61008661040a565b6100ab6100a6366004610e1f565b61056f565b6040516100b89190610e8d565b60405180910390f35b6100c9610a44565b60405190151581526020016100b8565b610086610a8b565b60015465010000000000900473ffffffffffffffffffffffffffffffffffffffff1633146101565760405162461bcd60e51b815260206004820152600a60248201527f4f6e6c79206f776e65720000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b600581146101a65760405162461bcd60e51b815260206004820152601660248201527f576f7264206d7573742062652035206c65747465727300000000000000000000604482015260640161014d565b60408051601a80825261036082019092525f9160208201610340803683370190505090505f83838080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201829052509394505050505b8151811015610333575f82828151811061021f5761021f610ed4565b016020015160f81c90506041811080159061023e5750605a8160ff1611155b61028a5760405162461bcd60e51b815260206004820152601160248201527f496e76616c696420636861726163746572000000000000000000000000000000604482015260640161014d565b5f610296604183610efc565b9050848160ff16815181106102ad576102ad610ed4565b6020026020010151156103025760405162461bcd60e51b815260206004820152601060248201527f4475706c6963617465206c657474657200000000000000000000000000000000604482015260640161014d565b6001858260ff168151811061031957610319610ed4565b911515602092830291909101909101525050600101610203565b50600480546001810182555f919091527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b01610370848683610f96565b5050505050565b5f6103856201518042611064565b90506003548114610407578061039c600143611077565b406040516020016103b7929190918252602082015260400190565b60408051601f19818403018152908290528051602090910120600255600382905581907f0e70c84908991bee7f9bb917a18e4fe2ed297ad218e2b8b3241c2ce32b0d970f905f90a2610407610af1565b50565b5f6104186201518042611064565b335f9081526020819052604090205490915060ff16158061044a5750335f908152602081905260409020600101548114155b6104965760405162461bcd60e51b815260206004820152601e60248201527f47616d6520616c726561647920696e697469616c697a656420746f6461790000604482015260640161014d565b61049e610377565b6104a6610af1565b6040805160a08101825260018082525f6020808401828152848601838152606086018481526080870189815233808752868652958990209751885494519351925161ffff1990951690151561ff0019161761010060ff909416939093029290921763ffff00001916620100009115159190910263ff00000019161763010000009215159290920291909117855551939092019290925591519081527fada0ba55ddd90bb25ecc3a5e99986836201565b3a09e5be156e48713da1bfd63910160405180910390a150565b610577610de2565b335f9081526020819052604090205460ff166105d55760405162461bcd60e51b815260206004820152601460248201527f47616d65206e6f7420696e697469616c697a6564000000000000000000000000604482015260640161014d565b335f9081526020819052604090205462010000900460ff161561063a5760405162461bcd60e51b815260206004820152601660248201527f47616d6520616c726561647920636f6d706c6574656400000000000000000000604482015260640161014d565b335f90815260208190526040902054600661010090910460ff16106106a15760405162461bcd60e51b815260206004820152601760248201527f4d6178696d756d20677565737365732072656163686564000000000000000000604482015260640161014d565b5f83838080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92019190915250508251929350505060051461072b5760405162461bcd60e51b815260206004820152601760248201527f4775657373206d7573742062652035206c657474657273000000000000000000604482015260640161014d565b5f5b60058110156107bd575f82828151811061074957610749610ed4565b016020015160f81c9050604181108015906107685750605a8160ff1611155b6107b45760405162461bcd60e51b815260206004820152601b60248201527f4f6e6c792075707065726361736520412e2e5a20616c6c6f7765640000000000604482015260640161014d565b5060010161072d565b506107c6610de2565b6001805460d81b5f5b600560ff821610156108d5575f858260ff16815181106107f1576107f1610ed4565b016020015160f81c90505f8360ff84166005811061081157610811610ed4565b1a905060ff8216819003610848576002868460ff166005811061083657610836610ed4565b60ff90921660209290920201526108cb565b5f805b600560ff82161015610895578460ff168160ff16031561088d57858160ff166005811061087a5761087a610ed4565b1a60ff85160361088d5760019150610895565b60010161084b565b50806108a1575f6108a4565b60015b878560ff16600581106108b9576108b9610ed4565b60ff9092166020929092020152505f94505b50506001016107cf565b50335f9081526020819052604090208054610100900460ff169060016108fa8361108a565b91906101000a81548160ff021916908360ff16021790555050811561097557335f8181526020818152604091829020805463ffff00001916630101000017905581519283526001908301527f9b830e6ccbf17da6759bc3bab3e198411a4d141451c048d4529e4f377bedd446910160405180910390a16109ea565b335f90815260208190526040902054600661010090910460ff16106109ea57335f81815260208181526040808320805462ff00001916620100001790558051938452908301919091527f9b830e6ccbf17da6759bc3bab3e198411a4d141451c048d4529e4f377bedd446910160405180910390a15b335f8181526020818152604091829020548251938452610100900460ff16908301527f17f532dd235deda5af44a6b92010fc363a16f9cbcee386385d1191363f40f20c910160405180910390a15090925050505b92915050565b5f80610a536201518042611064565b335f9081526020819052604090205490915060ff161580610a855750335f908152602081905260409020600101548114155b91505090565b335f9081526020819052604090205460ff1615610abc57335f908152602081905260409020805463ffffffff191690555b6040513381527f5c5242c86e1c99f381866c8c3d6542c0f9691ec890edfe6699def7dafa9a34f69060200160405180910390a1565b5f6004610afc610bc7565b81548110610b0c57610b0c610ed4565b905f5260205f20018054610b1f90610f15565b80601f0160208091040260200160405190810160405280929190818152602001828054610b4b90610f15565b8015610b965780601f10610b6d57610100808354040283529160200191610b96565b820191905f5260205f20905b815481529060010190602001808311610b7957829003601f168201915b505050505090505f81905080610bab906110a8565b6001805464ffffffffff191660d89290921c9190911790555050565b6004546002545f918291610bdb9190611114565b90505f5b600454811015610cc3576004545f90610bf88385611127565b610c029190611114565b9050610cae60048281548110610c1a57610c1a610ed4565b905f5260205f20018054610c2d90610f15565b80601f0160208091040260200160405190810160405280929190818152602001828054610c5990610f15565b8015610ca45780601f10610c7b57610100808354040283529160200191610ca4565b820191905f5260205f20905b815481529060010190602001808311610c8757829003601f168201915b5050505050610d0c565b15610cba579392505050565b50600101610bdf565b5060405162461bcd60e51b815260206004820152601f60248201527f4e6f20756e697175652d6c657474657220776f726420617661696c61626c6500604482015260640161014d565b80515f908290600514610d2157505f92915050565b610d29610e00565b5f5b8251811015610dd7575f838281518110610d4757610d47610ed4565b016020015160f81c90506041811080610d635750605a8160ff16115b15610d7357505f95945050505050565b5f610d7f604183610efc565b9050838160ff16601a8110610d9657610d96610ed4565b602002015115610dac57505f9695505050505050565b6001848260ff16601a8110610dc357610dc3610ed4565b911515602090920201525050600101610d2b565b506001949350505050565b6040518060a001604052806005906020820280368337509192915050565b604051806103400160405280601a906020820280368337509192915050565b5f5f60208385031215610e30575f5ffd5b823567ffffffffffffffff811115610e46575f5ffd5b8301601f81018513610e56575f5ffd5b803567ffffffffffffffff811115610e6c575f5ffd5b856020828401011115610e7d575f5ffd5b6020919091019590945092505050565b60a0810181835f5b6005811015610eb757815160ff16835260209283019290910190600101610e95565b50505092915050565b634e487b7160e01b5f52604160045260245ffd5b634e487b7160e01b5f52603260045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b60ff8281168282160390811115610a3e57610a3e610ee8565b600181811c90821680610f2957607f821691505b602082108103610f4757634e487b7160e01b5f52602260045260245ffd5b50919050565b601f821115610f9157805f5260205f20601f840160051c81016020851015610f725750805b601f840160051c820191505b81811015610370575f8155600101610f7e565b505050565b67ffffffffffffffff831115610fae57610fae610ec0565b610fc283610fbc8354610f15565b83610f4d565b5f601f841160018114610ff3575f8515610fdc5750838201355b5f19600387901b1c1916600186901b178355610370565b5f83815260208120601f198716915b828110156110225786850135825560209485019460019092019101611002565b508682101561103e575f1960f88860031b161c19848701351681555b505060018560011b0183555050505050565b634e487b7160e01b5f52601260045260245ffd5b5f8261107257611072611050565b500490565b81810381811115610a3e57610a3e610ee8565b5f60ff821660ff810361109f5761109f610ee8565b60010192915050565b805160208201517fffffffffff00000000000000000000000000000000000000000000000000000081169190600582101561110d577fffffffffff000000000000000000000000000000000000000000000000000000808360050360031b1b82161692505b5050919050565b5f8261112257611122611050565b500690565b80820180821115610a3e57610a3e610ee856fea164736f6c634300081b000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "submitGuess(string)": {
        "params": {
          "guess": "5-letter uppercase ASCII word"
        },
        "returns": {
          "_0": "results array: 0 = not in word, 1 = in word wrong position, 2 = correct position"
        }
      }
    },
    "title": "On-chain Wordle Game (plaintext)",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addWord(string)": {
        "notice": "Owner can add new unique-letter word to the list"
      },
      "hasNewDailyWord()": {
        "notice": "Returns true if a new daily word is available for caller"
      },
      "initializeDailyGame()": {
        "notice": "Initialize today's game for caller"
      },
      "resetGame()": {
        "notice": "Reset the caller's game state"
      },
      "submitGuess(string)": {
        "notice": "Submit a plaintext guess and get per-position results"
      },
      "updateDailySeed()": {
        "notice": "Update the daily seed and target word (idempotent if same day)"
      }
    },
    "notice": "Purely on-chain Wordle without FHE; uses daily pseudo-random word from a curated list",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9143,
        "contract": "contracts/Wordle.sol:Wordle",
        "label": "games",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_struct(Game)9138_storage)"
      },
      {
        "astId": 9145,
        "contract": "contracts/Wordle.sol:Wordle",
        "label": "targetWord",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes5"
      },
      {
        "astId": 9147,
        "contract": "contracts/Wordle.sol:Wordle",
        "label": "owner",
        "offset": 5,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 9149,
        "contract": "contracts/Wordle.sol:Wordle",
        "label": "dailySeed",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 9151,
        "contract": "contracts/Wordle.sol:Wordle",
        "label": "lastSeedDay",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 9454,
        "contract": "contracts/Wordle.sol:Wordle",
        "label": "wordList",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_string_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes5": {
        "encoding": "inplace",
        "label": "bytes5",
        "numberOfBytes": "5"
      },
      "t_mapping(t_address,t_struct(Game)9138_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Wordle.Game)",
        "numberOfBytes": "32",
        "value": "t_struct(Game)9138_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Game)9138_storage": {
        "encoding": "inplace",
        "label": "struct Wordle.Game",
        "members": [
          {
            "astId": 9129,
            "contract": "contracts/Wordle.sol:Wordle",
            "label": "initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 9131,
            "contract": "contracts/Wordle.sol:Wordle",
            "label": "guessCount",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 9133,
            "contract": "contracts/Wordle.sol:Wordle",
            "label": "completed",
            "offset": 2,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 9135,
            "contract": "contracts/Wordle.sol:Wordle",
            "label": "won",
            "offset": 3,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 9137,
            "contract": "contracts/Wordle.sol:Wordle",
            "label": "gameDay",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}